apply plugin: 'com.android.library'
apply plugin: 'maven'

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def getVersionCode() {
    return mavenMajorVersion.toInteger() * 10000 + mavenMinorVersion.toInteger() * 100 + mavenPatchVersion.toInteger()
}

def getVersionName() {
    return "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}"
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
        versionCode this.getVersionCode()
        versionName this.getVersionName()
    }

    lintOptions {
        disable 'InvalidPackage', 'AllowBackup'
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

apply plugin: 'checkstyle'

check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("../checkstyle.xml")
    source 'src'
    include 'main/**/*.java'
    exclude '**/generated/**',
            '**/extensions/**',
            '**/core/OneDriveErrorCodes.java',
            '**/http/OneDrive*Error*.java',
            '**/authentication/ServiceInfo.java',
            '**/authentication/DiscoveryServiceResponse.java'
    ignoreFailures = false
    classpath = files()
}

dependencies {
    compile ('com.microsoft.services.msa:msa-auth:0.8.4') {
        exclude module: 'com.microsoft.services.msa'
    }
    compile ('com.microsoft.aad:adal:1.1.7') {
        exclude module: 'com.microsoft.aad'
    }
    compile ('com.google.code.gson:gson:2.3.1') {
        exclude module: 'com.google.code.gson'
    }
}

uploadArchives {
    def bintrayUsername = ""
    def bintrayApikey = ""
    if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        bintrayUsername = properties.getProperty('bintray.user')
        bintrayApikey = properties.getProperty('bintray.apikey')
    }

    configuration = configurations.archives
    repositories.mavenDeployer {
        pom {
           setGroupId project.mavenGroupId
           setArtifactId project.mavenArtifactId
           setVersion getVersionName()
        }
        repository (url: project.mavenRepoUrl) {
            authentication(
                 // put these values in local file ~/.gradle/gradle.properties
                 userName: project.hasProperty("bintrayUsername") ? project.bintrayUsername : bintrayUsername,
                 password: project.hasProperty("bintrayApikey") ? project.bintrayApikey : bintrayApikey
            )
        }
    }
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath())
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
